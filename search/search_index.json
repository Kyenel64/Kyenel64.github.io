{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Locus Game Engine","text":"<p>Locus is a free and open-source game engine aimed to be lightweight and general-purpose. </p>"},{"location":"#download-latest-or-build-from-source","title":"Download Latest or Build from Source","text":"<p>The engine is still in development. Progress can be tracked here.</p>"},{"location":"#about-locus","title":"About Locus","text":"<p>The engine is ECS-based with C# scripting, making the workflow familiar and easy to use for many game developers.  Locus comes with a fully integrated editor with a simple interface to help build games of any genre. </p>"},{"location":"#locus-2d","title":"Locus 2D","text":"<p>Right now, development is focused on the engine's 2D systems. This includes 2D physics, sprite rendering, spritesheets, 2D skeletal animations, etc. Work on the 3D systems will begin once more of the 2D systems are implemented.</p>"},{"location":"#contribute","title":"Contribute","text":"<p>Contribution to the project is always welcome. If you would like to help out or if you found a bug, please submit a pull-request/issue on the GitHub repository.</p>"},{"location":"#about-me","title":"About Me","text":"<p>My name is Kye Nelson and I study Computer Science at the University of Washington. My passion is in computer graphics and game engine development. I currently reside in Japan and I am natively fluent in both English and Japanese.  You can find me on LinkedIn and GitHub.</p>"},{"location":"Pages/Documentation/Introduction/","title":"Introduction","text":"<p>This section contains guides for the Locus editor and references to the C# scripting API for Locus. It also contains an example project to demonstrate core systems of the engine.  Each class reference will contain information about the class with a list of its properties and methods. </p> <p>Note: The documentation will be up to date with the \"develop\" branch, not the master branch of Locus. This means there might be documentations for classes that are not yet included in the most recent release. Each class reference will include the version number when the class was implemented to reduce confusion.</p>"},{"location":"Pages/Documentation/Workflow/","title":"Workflow","text":"<p>The workflow for Locus is similar to many other ECS-based engines such as Unity. </p>"},{"location":"Pages/Documentation/Workflow/#entities","title":"Entities","text":"<p>Entities are the objects within a scene. They can represent anything from characters to lighting. Under the hood, entities are just containers for components and only holds an ID. By adding components, entities are able to carry out all kinds of functionalities.</p> <p>All entities contain a unique ID (UUID), a tag, and a transform. </p>"},{"location":"Pages/Documentation/Workflow/#components","title":"Components","text":"<p>Components are what attaches to the entity and gives it functionality. Components contain data that defines the behavior of the entity. Component data can be manipulated through the editor or through scripting.</p>"},{"location":"Pages/Documentation/Workflow/#scenes","title":"Scenes","text":"<p>Scenes make up a collection of entities. This is where the level / environment is built. Scene files contain information about the scene and all entities contained in it. </p>"},{"location":"Pages/Documentation/Workflow/#scripting","title":"Scripting","text":"<p>Locus uses C# for its scripting system. Scripts are just like any other component and can be attached to any entity. Scripts will operate on the attached entity and a class can be attached to as many entities.  Public properties are displayed in the editor and can be manipulated directly from the editor. </p> <p>A newly created script for a Player class will look something like this</p> <pre><code>using System;\nusing Locus;\n\nnamespace Sandbox\n{\n    public class Player : Entity\n    {\n        void OnCreate()\n        {\n\n        }\n\n        void OnUpdate(float deltaTime)\n        {\n\n        }\n\n        // Optional collision callbacks\n        public override void OnCollisionBegin(Entity entity)\n        {\n\n        }\n\n        public override void OnCollisionEnd(Entity entity)\n        {\n\n        }\n    }\n}\n</code></pre> <p>All entity scripts derive from the Entity class and has built-in functions that gets called by the engine.  Scripts do not need to be in a namespace and is primarily used for organization purposes.</p>"},{"location":"Pages/Documentation/Workflow/#locus-editor","title":"Locus Editor","text":"<p>Each panel in the editor can be reorganized or detached.</p>"},{"location":"Pages/Documentation/Workflow/#toolbar","title":"Toolbar","text":"<p>The toolbar contains the main dropdown settings for the application and the runtime buttons for the current scene.</p>"},{"location":"Pages/Documentation/Workflow/#viewport","title":"Viewport","text":"<p>The viewport is where the scene is rendered. There is a toolbar on the top left corner for gizmo operations and editor view settings.  If an entity with a camera component is selected, it will display a preview in the bottom right corner.</p>"},{"location":"Pages/Documentation/Workflow/#scene-hierarchy","title":"Scene Hierarchy","text":"<p>The scene hierarchy contains the scene graph of the entities within the active scene. Here you can create, destroy, duplicate entities and search for entity names.</p>"},{"location":"Pages/Documentation/Workflow/#properties","title":"Properties","text":"<p>The properties panel contains all the components attached to the selected entity. All entities contain the tag component and transform component. You can add, remove, and copy components here.</p>"},{"location":"Pages/Documentation/Workflow/#content-browser","title":"Content Browser","text":"<p>The content browser displays the directory of the active project. The left hand side displays the entire project tree and the right hand side displays the items in the current folder. You can drag and drop certain items from the content browser to respective areas. </p>"},{"location":"Pages/Documentation/Workflow/#console","title":"Console","text":"<p>The console panel displays error messages and a trace for each error. Error messages can be copied, cleared, and filtered.</p>"},{"location":"Pages/Documentation/Workflow/#debug","title":"Debug","text":"<p>The debug panel is primarily used for backend engine work but can provide useful information about the scene and entities. </p>"},{"location":"Pages/Documentation/Classes/CircleCollider2DComponent/","title":"CircleCollider2DComponent","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha      Derives from Component"},{"location":"Pages/Documentation/Classes/CircleCollider2DComponent/#description","title":"Description","text":"<p>2D circular collision area. </p>"},{"location":"Pages/Documentation/Classes/CircleRendererComponent/","title":"CircleRendererComponent","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha      Derives from Component"},{"location":"Pages/Documentation/Classes/CircleRendererComponent/#description","title":"Description","text":"<p>Renders a 2D circle.</p>"},{"location":"Pages/Documentation/Classes/CircleRendererComponent/#properties","title":"Properties","text":"Name Type Description <code>Color</code> <code>Color</code> Color of the circle. <code>Thickness</code> <code>float</code> Inner thickness of the circle. 0 displays nothing and 1 displays a full circle. <code>Fade</code> <code>float</code> The blur of the circle."},{"location":"Pages/Documentation/Classes/Color/","title":"Color","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha"},{"location":"Pages/Documentation/Classes/Color/#description","title":"Description","text":"<p>Represents a color in RGBA format with range 0 - 1.</p>"},{"location":"Pages/Documentation/Classes/Color/#properties","title":"Properties","text":"Name Type Description <code>r</code> <code>float</code> Red channel. <code>g</code> <code>float</code> Green channel. <code>b</code> <code>float</code> Blue channel. <code>a</code> <code>float</code> Alpha channel."},{"location":"Pages/Documentation/Classes/Color/#static-properties","title":"Static Properties","text":"Name Type Description <code>Black</code> <code>Color</code> Returns a black color. <code>White</code> <code>Color</code> Returns a white color. <code>Red</code> <code>Color</code> Returns a red color. <code>Green</code> <code>Color</code> Returns a green color. <code>Blue</code> <code>Color</code> Returns a blue color. <code>Yellow</code> <code>Color</code> Returns a yellow color."},{"location":"Pages/Documentation/Classes/Color/#constructors","title":"Constructors","text":"Name Description <code>Color (float value)</code> Sets the RGB channels to the value with alpha = 1.0f. <code>Color (float R, float G, float B)</code> Sets each RGB channels with alpha = 1.0f. <code>Color (float R, float G, float B, float A)</code> Sets each RGBA channels."},{"location":"Pages/Documentation/Classes/Color/#overrides","title":"Overrides","text":"Name Return type Description <code>+ (Color c1, Color c2)</code> <code>Color</code> Adds two colors. <code>+ (Color col, float s)</code> <code>Color</code> Adds a color with a scalar. <code>+ (float s, Color col)</code> <code>Color</code> Adds a scalar value to each channel in a color. <code>- (Color c1, Color c2)</code> <code>Color</code> Subtracts c2 from c1. <code>- (Color col, float s)</code> <code>Color</code> Subtracts a scalar value from a color. <code>- (float s, Color col)</code> <code>Color</code> Subtracts each channel in a color by a scalar value. <code>* (Color c1, Color c2)</code> <code>Color</code> Multiplies two colors. <code>* (Color col, float s)</code> <code>Color</code> Multiplies a color with a scalar value. <code>* (float s, Color col)</code> <code>Color</code> Multiplies each channel in a color with a scalar value. <code>/ (Color c1, Color c2)</code> <code>Color</code> Divides c1 by c2. <code>/ (Color col, float s)</code> <code>Color</code> Divides a color by a scalar value. <code>/ (float s, Color col)</code> <code>Color</code> Divides a scalar value by each channel in a color. <code>ToString ()</code> <code>String</code> Prints each channel in a color."},{"location":"Pages/Documentation/Classes/Component/","title":"Component","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha"},{"location":"Pages/Documentation/Classes/Component/#description","title":"Description","text":"<p>Base class for all components. Only contains the entity the component is attached to.</p>"},{"location":"Pages/Documentation/Classes/Component/#properties","title":"Properties","text":"Name Type Description <code>Entity</code> <code>Entity</code> The entity this component is attached to."},{"location":"Pages/Documentation/Classes/Entity/","title":"Entity","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha"},{"location":"Pages/Documentation/Classes/Entity/#description","title":"Description","text":"<p>Base class for all entities.</p>"},{"location":"Pages/Documentation/Classes/Entity/#properties","title":"Properties","text":"Name Type Description <code>ID</code> <code>ulong</code> The unique identifier for the entity. (read only) <code>Tag</code> <code>string</code> Name of the entity. <code>Group</code> <code>string</code> The group/layer of the entity. <code>Enabled</code> <code>bool</code> The enabled state of the entity. <code>Transform</code> <code>TransformComponent</code> The transform component attached to the entity."},{"location":"Pages/Documentation/Classes/Entity/#static-properties","title":"Static Properties","text":"Name Type Description <code>Null</code> <code>Entity</code> Returns a null entity with ID = 0."},{"location":"Pages/Documentation/Classes/Entity/#constructors","title":"Constructors","text":"Name Description <code>Entity ()</code> Creates an entity with ID = 0."},{"location":"Pages/Documentation/Classes/Entity/#public-methods","title":"Public Methods","text":"Name Return type Description <code>HasComponent&lt;T&gt; ()</code> <code>bool</code> Returns true if entity has component T. <code>GetComponent&lt;T&gt; ()</code> <code>T</code> Gets the component T attached to the entity. Returns null if entity does not contain the component. <code>AddComponent&lt;T&gt; ()</code> <code>T</code> Adds component T to the entity"},{"location":"Pages/Documentation/Classes/Entity/#static-methods","title":"Static Methods","text":"Name Return type Description <code>CreateEntity (string tag = \u201cEmpty Entity\u201d)</code> <code>Entity</code> Creates a new entity. Optionally defines the tag of the entity. <code>Destroy (Entity entity)</code> <code>void</code> Destroys an entity. <code>Find (string tag)</code> <code>Entity</code> Searches and returns an entity by tag. Returns null if entity is not found."},{"location":"Pages/Documentation/Classes/Entity/#collision-callbacks","title":"Collision Callbacks","text":"Name Return type Description <code>OnCollisionBegin (Entity entity)</code> <code>void</code> Called whenever the entity begins a collision with another entity. <code>OnCollisionEnd (Entity entity)</code> <code>void</code> Called whenever the entity ends a collision with another entity."},{"location":"Pages/Documentation/Classes/Input/","title":"Input","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha"},{"location":"Pages/Documentation/Classes/Input/#description","title":"Description","text":"<p>Input class for Locus.</p>"},{"location":"Pages/Documentation/Classes/Input/#static-methods","title":"Static Methods","text":"Name Return type Description <code>IsKeyPressed (KeyCode key)</code> <code>bool</code> Returns true when key is pressed. <code>IsKeyHeld (KeyCode key)</code> <code>bool</code> Returns true while key is held down. <code>IsKeyReleased (KeyCode key)</code> <code>bool</code> Returns true when key is released."},{"location":"Pages/Documentation/Classes/Mat4/","title":"Mat4","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha"},{"location":"Pages/Documentation/Classes/Mat4/#description","title":"Description","text":"<p>4x4 matrix of floats.</p>"},{"location":"Pages/Documentation/Classes/Mat4/#constructors","title":"Constructors","text":"Name Description <code>Mat4 (float value)</code> Sets a diagonal matrix."},{"location":"Pages/Documentation/Classes/Rigidbody2DComponent/","title":"Rigidbody2DComponent","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha      Derives from Component"},{"location":"Pages/Documentation/Classes/Rigidbody2DComponent/#description","title":"Description","text":"<p>The 2D physics body. </p>"},{"location":"Pages/Documentation/Classes/Rigidbody2DComponent/#properties","title":"Properties","text":"Name Type Description <code>BodyType</code> <code>RigidbodyType</code> The physical behaviour of the rigidbody. Static, Dynamic, or Kinematic. <code>Mass</code> <code>float</code> Mass of the body. <code>GravityScale</code> <code>float</code> The speed of the entity's movement affected by gravity. <code>LinearDamping</code> <code>float</code> The rate at which the world velocity is reduced on the entity. <code>AngularDamping</code> <code>float</code> The rate at which the angular velocity is reduced on the entity. <code>FixedRotation</code> <code>bool</code> Whether the entity can rotate. Constraint along the z-axis. <code>IsBullet</code> <code>bool</code> Whether to enable continuous collision detection. This prevents fast moving dynamic bodies clipping through other dynamic bodies. <code>Position</code> <code>Vec2</code> Position of the rigidbody.  Note: Position cannot be set through the transform component if a rigidbody is attached. <code>Velocity</code> <code>Vec2</code> Velocity of the rigidbody."},{"location":"Pages/Documentation/Classes/Rigidbody2DComponent/#public-methods","title":"Public Methods","text":"Name Return type Description <code>AddForce (Vec2 force)</code> <code>void</code> Adds a force to the rigidbody. <code>AddLinearImpulse (Vec2 impulse)</code> <code>void</code> Adds an impluse to the rigidbody. Equal to the change in momentum."},{"location":"Pages/Documentation/Classes/SpriteRendererComponent/","title":"SpriteRendererComponent","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha      Derives from Component"},{"location":"Pages/Documentation/Classes/SpriteRendererComponent/#description","title":"Description","text":"<p>Renders a 2D quad or sprite if a texture is attached.</p>"},{"location":"Pages/Documentation/Classes/SpriteRendererComponent/#properties","title":"Properties","text":"Name Type Description <code>Color</code> <code>Color</code> Color of the sprite. Becomes a tint if a texture is attached. <code>TilingFactor</code> <code>float</code> Tiling factor of the attached texture."},{"location":"Pages/Documentation/Classes/TransformComponent/","title":"TransformComponent","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha      Derives from Component"},{"location":"Pages/Documentation/Classes/TransformComponent/#description","title":"Description","text":"<p>Position, rotation, and scale of the entity.</p>"},{"location":"Pages/Documentation/Classes/TransformComponent/#properties","title":"Properties","text":"Name Type Description <code>LocalTransform</code> <code>Mat4</code> Local transform matrix of the entity relative to its parent. <code>WorldTransform</code> <code>Mat4</code> World transform matrix of the entity relative to the scene. <code>WorldToLocal</code> <code>Mat4</code> Matrix to convert world space coordinates to local space. <code>Position</code> <code>Vec3</code> Local position of the entity. <code>EulerRotation</code> <code>Vec3</code> Local euler rotation of the entity in degrees. <code>Scale</code> <code>Vec3</code> Local scale of the entity."},{"location":"Pages/Documentation/Classes/Vec2/","title":"Vec2","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha"},{"location":"Pages/Documentation/Classes/Vec2/#description","title":"Description","text":"<p>2D vector of floats.</p>"},{"location":"Pages/Documentation/Classes/Vec2/#properties","title":"Properties","text":"Name Type Description <code>x</code> <code>float</code> x value. <code>y</code> <code>float</code> y value."},{"location":"Pages/Documentation/Classes/Vec2/#static-properties","title":"Static Properties","text":"Name Type Description <code>Zero</code> <code>Vec2</code> Returns a 2D zero vector."},{"location":"Pages/Documentation/Classes/Vec2/#constructors","title":"Constructors","text":"Name Description <code>Vec2 (float value)</code> Sets all values to the given value. <code>Vec2 (float X, float Y)</code> Sets each value."},{"location":"Pages/Documentation/Classes/Vec2/#static-methods","title":"Static Methods","text":"Name Return type Description <code>Distance (Vec2 v1, Vec2 v2)</code> <code>float</code> Distance between two 2D vectors. <code>Length ()</code> <code>float</code> Length of a 2D vector."},{"location":"Pages/Documentation/Classes/Vec2/#overrides","title":"Overrides","text":"Name Return type Description <code>+ (Vec2 v1, Vec2 v2)</code> <code>Vec2</code> Adds two 2D vectors. <code>+ (Vec2 vec, float s)</code> <code>Vec2</code> Adds a 2D vector with a scalar. <code>+ (float s, Vec2 vec)</code> <code>Vec2</code> Adds a scalar value to each value in a 2D vector. <code>- (Vec2 v1, Vec2 v2)</code> <code>Vec2</code> Subtracts v2 from v1. <code>- (Vec2 vec, float s)</code> <code>Vec2</code> Subtracts a scalar value from a 2D vector. <code>- (float s, Vec2 vec)</code> <code>Vec2</code> Subtracts each value in a 2D vector by a scalar value. <code>* (Vec2 v1, Vec2 v2)</code> <code>Vec2</code> Multiplies two 2D vectors. <code>* (Vec2 vec, float s)</code> <code>Vec2</code> Multiplies a 2D vector with a scalar value. <code>* (float s, Vec2 vec)</code> <code>Vec2</code> Multiplies each value in a 2D vector with a scalar value. <code>/ (Vec2 v1, Vec2 v2)</code> <code>Vec2</code> Divides v1 by v2. <code>/ (Vec2 vec, float s)</code> <code>Vec2</code> Divides a 2D vector by a scalar value. <code>/ (float s, Vec2 vec)</code> <code>Vec2</code> Divides a scalar value by each value in a 2D vector. <code>ToString ()</code> <code>String</code> Prints each value in a 2D vector."},{"location":"Pages/Documentation/Classes/Vec3/","title":"Vec3","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha"},{"location":"Pages/Documentation/Classes/Vec3/#description","title":"Description","text":"<p>3D vector of floats.</p>"},{"location":"Pages/Documentation/Classes/Vec3/#properties","title":"Properties","text":"Name Type Description <code>x</code> <code>float</code> x value. <code>y</code> <code>float</code> y value. <code>z</code> <code>float</code> z value."},{"location":"Pages/Documentation/Classes/Vec3/#static-properties","title":"Static Properties","text":"Name Type Description <code>Zero</code> <code>Vec3</code> Returns a 3D zero vector."},{"location":"Pages/Documentation/Classes/Vec3/#constructors","title":"Constructors","text":"Name Description <code>Vec3 (float value)</code> Sets all values to the given value. <code>Vec3 (float X, float Y, float Z)</code> Sets each value."},{"location":"Pages/Documentation/Classes/Vec3/#static-methods","title":"Static Methods","text":"Name Return type Description <code>Cross (Vec3 v1, Vec3 v2)</code> <code>Vec3</code> Cross product of two 3D vectors. <code>Distance (Vec3 v1, Vec3 v2)</code> <code>float</code> Distance between two 3D vectors. <code>Length ()</code> <code>float</code> Length of a 3D vector."},{"location":"Pages/Documentation/Classes/Vec3/#overrides","title":"Overrides","text":"Name Return type Description <code>+ (Vec3 v1, Vec3 v2)</code> <code>Vec3</code> Adds two 3D vectors. <code>+ (Vec3 vec, float s)</code> <code>Vec3</code> Adds a 3D vector with a scalar. <code>+ (float s, Vec3 vec)</code> <code>Vec3</code> Adds a scalar value to each value in a 3D vector. <code>- (Vec3 v1, Vec3 v2)</code> <code>Vec3</code> Subtracts v2 from v1. <code>- (Vec3 vec, float s)</code> <code>Vec3</code> Subtracts a scalar value from a 3D vector. <code>- (float s, Vec3 vec)</code> <code>Vec3</code> Subtracts each value in a 3D vector by a scalar value. <code>* (Vec3 v1, Vec3 v2)</code> <code>Vec3</code> Multiplies two 3D vectors. <code>* (Vec3 vec, float s)</code> <code>Vec3</code> Multiplies a 3D vector with a scalar value. <code>* (float s, Vec3 vec)</code> <code>Vec3</code> Multiplies each value in a 3D vector with a scalar value. <code>/ (Vec3 v1, Vec3 v2)</code> <code>Vec3</code> Divides v1 by v2. <code>/ (Vec3 vec, float s)</code> <code>Vec3</code> Divides a 3D vector by a scalar value. <code>/ (float s, Vec3 vec)</code> <code>Vec3</code> Divides a scalar value by each value in a 3D vector. <code>* (Vec3 vec, Mat4 mat)</code> <code>Vec3</code> Multiplies a 3D vector by a 4x4 matrix. <code>ToString ()</code> <code>String</code> Prints each value in a 3D vector."},{"location":"Pages/Documentation/Classes/Vec4/","title":"Vec4","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha"},{"location":"Pages/Documentation/Classes/Vec4/#description","title":"Description","text":"<p>4D vector of floats.</p>"},{"location":"Pages/Documentation/Classes/Vec4/#properties","title":"Properties","text":"Name Type Description <code>x</code> <code>float</code> x value. <code>y</code> <code>float</code> y value. <code>z</code> <code>float</code> z value. <code>w</code> <code>float</code> w value."},{"location":"Pages/Documentation/Classes/Vec4/#static-properties","title":"Static Properties","text":"Name Type Description <code>Zero</code> <code>Vec4</code> Returns a 4D zero vector."},{"location":"Pages/Documentation/Classes/Vec4/#constructors","title":"Constructors","text":"Name Description <code>Vec4 (float value)</code> Sets all values to the given value. <code>Vec4 (float X, float Y, float Z, float W)</code> Sets each value."},{"location":"Pages/Documentation/Classes/Vec4/#static-methods","title":"Static Methods","text":"Name Return type Description <code>Distance (Vec4 v1, Vec4 v2)</code> <code>float</code> Distance between two 4D vectors. <code>Length ()</code> <code>float</code> Length of a 4D vector."},{"location":"Pages/Documentation/Classes/Vec4/#overrides","title":"Overrides","text":"Name Return type Description <code>+ (Vec4 v1, Vec4 v2)</code> <code>Vec4</code> Adds two 4D vectors. <code>+ (Vec4 vec, float s)</code> <code>Vec4</code> Adds a 4D vector with a scalar. <code>+ (float s, Vec4 vec)</code> <code>Vec4</code> Adds a scalar value to each value in a 4D vector. <code>- (Vec4 v1, Vec4 v2)</code> <code>Vec4</code> Subtracts v2 from v1. <code>- (Vec4 vec, float s)</code> <code>Vec4</code> Subtracts a scalar value from a 4D vector. <code>- (float s, Vec4 vec)</code> <code>Vec4</code> Subtracts each value in a 4D vector by a scalar value. <code>* (Vec4 v1, Vec4 v2)</code> <code>Vec4</code> Multiplies two 4D vectors. <code>* (Vec4 vec, float s)</code> <code>Vec4</code> Multiplies a 4D vector with a scalar value. <code>* (float s, Vec4 vec)</code> <code>Vec4</code> Multiplies each value in a 4D vector with a scalar value. <code>/ (Vec4 v1, Vec4 v2)</code> <code>Vec4</code> Divides v1 by v2. <code>/ (Vec4 vec, float s)</code> <code>Vec4</code> Divides a 4D vector by a scalar value. <code>/ (float s, Vec4 vec)</code> <code>Vec4</code> Divides a scalar value by each value in a 4D vector. <code>* (Vec4 vec, Mat4 mat)</code> <code>Vec4</code> Multiplies a 4D vector by a 4x4 matrix. <code>ToString ()</code> <code>String</code> Prints each value in a 4D vector."},{"location":"Pages/Documentation/Enums/KeyCode/","title":"KeyCode","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha"},{"location":"Pages/Documentation/Enums/KeyCode/#description","title":"Description","text":"<p>KeyCodes corresponding to physical keys on the keyboard.  Numerical keycodes begin with a \"D\" (Eg. D0, D1)</p>"},{"location":"Pages/Documentation/Enums/KeyCode/#properties","title":"Properties","text":"Name Description <code>Space</code> Spacebar <code>Apostrophe</code> ' <code>Comma</code> , <code>Minus</code> - <code>Period</code> . <code>Slash</code> / <code>D0</code> 0 <code>D1</code> 1 <code>D2</code> 2 <code>D3</code> 3 <code>D4</code> 4 <code>D5</code> 5 <code>D6</code> 6 <code>D7</code> 7 <code>D8</code> 8 <code>D9</code> 9 <code>Semicolon</code> ; <code>Equal</code> = <code>A</code> A <code>B</code> B <code>C</code> C <code>D</code> D <code>E</code> E <code>F</code> F <code>G</code> G <code>H</code> H <code>I</code> I <code>J</code> J <code>K</code> K <code>L</code> L <code>M</code> M <code>N</code> N <code>O</code> O <code>P</code> P <code>Q</code> Q <code>R</code> R <code>S</code> S <code>T</code> T <code>U</code> U <code>V</code> V <code>W</code> W <code>X</code> X <code>Y</code> Y <code>Z</code> Z <code>LeftBracket</code> [ <code>Backslash</code> \\ <code>RightBracket</code> ] <code>GraveAccent</code> ` <code>World1</code> non-US #1 <code>World2</code> non-US #2 <code>Escape</code> Esc key <code>Enter</code> Enter key <code>Tab</code> Tab key <code>Backspace</code> Backspace key <code>Insert</code> Insert key <code>Delete</code> Delete key <code>Right</code> Right arrow <code>Left</code> Left arrow <code>Down</code> Down arrow <code>Up</code> Up arrow <code>PageUp</code> PageUp key <code>PageDown</code> PageDown key <code>Home</code> Home key <code>End</code> End key <code>CapsLock</code> CapsLock key <code>ScrollLock</code> ScrollLock key <code>NumLock</code> NumLock key <code>PrintScreen</code> PrintScreen key <code>Pause</code> Pause key <code>F1</code> F1 <code>F2</code> F2 <code>F3</code> F3 <code>F4</code> F4 <code>F5</code> F5 <code>F6</code> F6 <code>F7</code> F7 <code>F8</code> F8 <code>F9</code> F9 <code>F10</code> F10 <code>F11</code> F11 <code>F12</code> F12 <code>F13</code> F13 <code>F14</code> F14 <code>F15</code> F15 <code>F16</code> F16 <code>F17</code> F17 <code>F18</code> F18 <code>F19</code> F19 <code>F20</code> F20 <code>F21</code> F21 <code>F22</code> F22 <code>F23</code> F23 <code>F24</code> F24 <code>F25</code> F25 <code>KP0</code> Keypad 0 <code>KP1</code> Keypad 1 <code>KP2</code> Keypad 2 <code>KP3</code> Keypad 3 <code>KP4</code> Keypad 4 <code>KP5</code> Keypad 5 <code>KP6</code> Keypad 6 <code>KP7</code> Keypad 7 <code>KP8</code> Keypad 8 <code>KP9</code> Keypad 9 <code>KPDecimal</code> Keypad Decimal <code>KPDivide</code> Keypad Divide <code>KPMultiply</code> Keypad Multiply <code>KPSubtract</code> Keypad Subtract <code>KPAdd</code> Keypad Add <code>KPEnter</code> Keypad Enter <code>KPEqual</code> Keypad Equal <code>LeftShift</code> Left Shift <code>LeftControl</code> Left Control <code>LeftAlt</code> Left Alt <code>LeftSuper</code> Left Super <code>RightShift</code> Right Shift <code>RightControl</code> Right Control <code>RightAlt</code> Right Alt <code>RightSuper</code> Right Super <code>Menu</code> Menu"},{"location":"Pages/Documentation/Enums/RigidbodyType/","title":"RigidbodyType","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha"},{"location":"Pages/Documentation/Enums/RigidbodyType/#description","title":"Description","text":"<p>The physical behaviour of the rigidbody.</p>"},{"location":"Pages/Documentation/Enums/RigidbodyType/#properties","title":"Properties","text":"Name Description <code>Static</code> Static rigidbody. <code>Dynamic</code> Dynamic rigidbody. <code>Kinematic</code> Kinematic rigidbody."},{"location":"Pages/GettingStarted/HowToBuild/","title":"How to Build","text":"<p>This page is a step-by-step guide on how to build and run Locus on your system. Compiling the source code from the develop branch will get you the latest updates on Locus.  If you would like to download the most recent release of Locus, head to the latest release page and download the zip file.  Note: The application currently has no .exe signature so it is recommended to build from source. </p>"},{"location":"Pages/GettingStarted/HowToBuild/#requirements","title":"Requirements","text":"<ul> <li>Windows OS</li> <li>OpenGL 4.5 supported hardware</li> <li>Visual Studio 2022</li> <li>Python 3</li> <li>.NET SDK</li> </ul>"},{"location":"Pages/GettingStarted/HowToBuild/#1-downloading-source-code","title":"1. Downloading source code","text":"<ul> <li>Run <code>git clone --recursive https://github.com/kyenel64/Locus-Engine</code> in the command prompt. Remember to include <code>--recursive</code> as Locus uses submodules.</li> </ul>"},{"location":"Pages/GettingStarted/HowToBuild/#2-run-scriptssetupbat","title":"2. Run Scripts/Setup.bat","text":"<ul> <li>Run Scripts/Setup.bat to install premake and generate a Visual Studio solution.</li> <li>IMPORTANT: Make sure 'Shader Toolchain Debug Symbols - 64-bit' is selected if the Vulkan pop-up opens.</li> </ul>"},{"location":"Pages/GettingStarted/HowToBuild/#3-build-using-visual-studio","title":"3. Build using Visual Studio","text":"<ul> <li>Open Locus.sln</li> <li>Build solution. (Locus-Editor should be selected as the startup project).</li> </ul>"},{"location":"Pages/GettingStarted/HowToBuild/#4-running-the-engine-editor","title":"4. Running the engine editor","text":"<ul> <li>The .exe file will be generated in bin/(Config)-windows-x86_64/Locus-Editor</li> </ul>"},{"location":"Pages/GettingStarted/HowToBuild/#note","title":"Note:","text":"<ul> <li>Scripts in projects must be compiled manually for now. Build the VS solution within your project directory when making changes to scripts. </li> </ul>"},{"location":"Pages/GettingStarted/Introduction/","title":"Introduction","text":"<p>This section will guide you through how to compile Locus and everything you need to know to get Locus running on your computer. </p>"},{"location":"Pages/GettingStarted/Introduction/#compatibility","title":"Compatibility","text":"<p>Locus currently only supports Windows. Integration with other operating systems will be considered if there is demand for it. </p> <p>Locus currently uses OpenGL 4.5+ for its graphics API but Vulkan and DirectX support will be integrated in the near future.</p>"},{"location":"Pages/GettingStarted/Introduction/#disclaimer","title":"Disclaimer","text":"<p>Since Locus is still a work in progress and new features are implemented frequently, save files may become corrupted.</p>"}]}