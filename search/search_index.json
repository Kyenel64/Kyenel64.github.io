{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Pages/About/Introduction/","title":"Introduction","text":"<p>Locus is an open-source, general-purpose 2D/3D game engine developed by Kye Nelson (Kyenel64).  It aims to be a lightweight, feature-rich game engine capable of creating any type of game from scratch. The engine is ECS-based and the scripting language is in C#, making it easier to learn for many game developers.</p>"},{"location":"Pages/About/Introduction/#contribute","title":"Contribute","text":"<p>Since Locus is only developed by one person, progress is not fast. If you would like to contribute to the development of the engine, I am always open to receive feedback.  Feel free to open an issue or pull request on the GitHub repository.</p>"},{"location":"Pages/About/Introduction/#about-locus","title":"About Locus","text":"<p>Locus initially started as a simple project for me to learn computer graphics and software architecture.  As I spent more time on the engine, it became more mature and turned into something worth putting more time into. I followed TheCherno's game engine series to learn about game engine development and to write this engine. I strongly recommend following the series if you are also interested in game engine development.</p>"},{"location":"Pages/About/Introduction/#about-me","title":"About Me","text":"<p>My name is Kye Nelson and I am a Computer Science and Software Engineering student at the University of Washington. My focus is in computer graphics and game engine development as you could probably tell. I enjoy cleaning and organizing my code just as much as writing the actual code.  Outside of coding, you will likely catch me riding my road bike or listening to 80's R&amp;B records.  My LinkedIn</p>"},{"location":"Pages/Documentation/Introduction/","title":"Introduction","text":"<p>This section contains references to the C# scripting API for Locus.  Each class reference will contain information about the class with a list of its properties and methods. </p> <p>The documentation will be up to date with the development branch, not the master branch of Locus. This means there might be documentations for classes that are not yet included in the most recent release. Each class reference will include the version number when the class was implemented to reduce confusion.</p>"},{"location":"Pages/Documentation/Classes/Component/","title":"Component","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha"},{"location":"Pages/Documentation/Classes/Component/#description","title":"Description","text":"<p>Base class for all components. Only contains the entity the component is attached to.</p>"},{"location":"Pages/Documentation/Classes/Component/#properties","title":"Properties","text":"Name Type Description <code>Entity</code> <code>Entity</code> The entity this component is attached to."},{"location":"Pages/Documentation/Classes/Entity/","title":"Entity","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha"},{"location":"Pages/Documentation/Classes/Entity/#description","title":"Description","text":"<p>Base class for all entities.</p>"},{"location":"Pages/Documentation/Classes/Entity/#properties","title":"Properties","text":"Name Type Description <code>ID</code> <code>ulong</code> UUID of the entity. <code>Tag</code> <code>string</code> Name of the entity. <code>Enabled</code> <code>bool</code> The enabled status of the entity. <code>Transform</code> <code>TransformComponent</code> The transform component attached to the entity. <code>Scene</code> <code>Scene</code> The scene that contains the entity."},{"location":"Pages/Documentation/Classes/Entity/#public-methods","title":"Public Methods","text":"Name Return type Description <code>GetComponent&lt;T&gt; ()</code> <code>T</code> Gets the component <code>T</code> attached to the entity. Returns null if not found. <code>HasComponent&lt;T&gt; ()</code> <code>bool</code> Checks if entity has component <code>T</code> <code>AddComponent&lt;T&gt; ()</code> <code>T</code> Adds component <code>T</code> to the entity."},{"location":"Pages/Documentation/Classes/Entity/#static-methods","title":"Static Methods","text":"Name Return type Description <code>CreateEntity (string tag = \u201cEmpty Entity\u201d)</code> <code>Entity</code> Creates an empty entity. Optionally sets the tag of the newly created entity. <code>Find (string tag)</code> <code>Entity</code> Searches for an entity with the given tag."},{"location":"Pages/Documentation/Classes/Vec3/","title":"Vec3","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha"},{"location":"Pages/Documentation/Classes/Vec3/#description","title":"Description","text":"<p>3D floating point vector class used for 3D and 2D position and vector operations. Contains static methods for common vector math operations. </p>"},{"location":"Pages/Documentation/Classes/Vec3/#properties","title":"Properties","text":"Name Type Description <code>x</code> <code>float</code> The x coordinate value. <code>y</code> <code>float</code> The y coordinate value. <code>z</code> <code>float</code> The z coordinate value."},{"location":"Pages/Documentation/Classes/Vec3/#static-properties","title":"Static Properties","text":"Name Type Description <code>Zero</code> <code>Vec3</code> A zero vector."},{"location":"Pages/Documentation/Classes/Vec3/#constructors","title":"Constructors","text":"Name Description <code>Vec3 (float value)</code> Sets all coordinates to the given value. <code>Vec3 (float X, float Y, float Z)</code> Sets each respective coordinate."},{"location":"Pages/Documentation/Classes/Vec3/#public-methods","title":"Public Methods","text":"Name Return type Description <code>Length ()</code> <code>float</code> Length of the vector."},{"location":"Pages/Documentation/Classes/Vec3/#static-methods","title":"Static Methods","text":"Name Return type Description <code>Cross (Vec3 v1, Vec3 v2)</code> <code>Vec3</code> Cross product between two vectors. <code>Distance (Vec3 v1, Vec3 v2)</code> <code>float</code> Distance between two 3D vectors. <code>Lerp (Vec3 a, Vec3 b, float t)</code> <code>Vec3</code> Linearly interpolates between two 3D vectors at a given point t."},{"location":"Pages/GettingStarted/HowToBuild/","title":"How to Build","text":"<p>This page is a step-by-step guide on how to build and run Locus on your system. Compiling the source code from the develop branch will get you the latest updates on Locus.  If you would like to download the most recent release of Locus, head to the latest release page and download the zip file.</p>"},{"location":"Pages/GettingStarted/HowToBuild/#requirements","title":"Requirements","text":"<ul> <li>Windows OS</li> <li>OpenGL 4.6 supported hardware</li> <li>Visual Studio 2022</li> <li>Python 3</li> </ul>"},{"location":"Pages/GettingStarted/HowToBuild/#downloading-the-source-code","title":"Downloading the source code","text":"<p>Locus utilizes submodules so downloading the zip of the source code will not work.  Instead, use the following command within the directory you want to download Locus.  <code>git clone --recurse-submodules https://github.com/kyenel64/Locus-Engine</code></p>"},{"location":"Pages/GettingStarted/HowToBuild/#generating-the-project","title":"Generating the project","text":"<p>Run <code>Scripts/Setup.bat</code> and follow the prompts to install premake and the Vulkan shader toolchain.  Make sure 'Shader Toolchain Debug Symbols - 64-bit' is selected when the Vulkan install pop-up opens. You might have to run the setup script twice if prompted.</p>"},{"location":"Pages/GettingStarted/HowToBuild/#building-the-solution","title":"Building the solution","text":"<p>Once the setup is finished, open <code>Locus.sln</code> which should be generated in the root directory.  Choose the configuration and build the solution. <code>Locus-Editor.exe</code> will be generated in <code>bin/{configuration}-windows-x86_64/Locus-Editor</code>.</p>"},{"location":"Pages/GettingStarted/Introduction/","title":"Introduction","text":"<p>This section will guide you through how to compile Locus, and go through the engine's core workflow including a few example projects. </p>"},{"location":"Pages/GettingStarted/Introduction/#compatibility","title":"Compatibility","text":"<p>Locus currently only supports Windows since the vast majority of users / developers use Windows. Other platform support will be considered in the future but as of right now, time and resources is limited and it does not make sense to add support for other platforms. The Steam hardware survey shows ~97% of users are on Windows. </p> <p>Locus currently uses OpenGL 4.5+ for its graphics API but Vulkan and DirectX support will definitely be implemented in the near future.</p>"},{"location":"Pages/GettingStarted/Introduction/#disclaimer","title":"Disclaimer","text":"<p>Since Locus is still a work in progress and new features are implemented frequently, save files may also become depricated frequently. I will try and push scripts to fix save files when necessary. </p>"},{"location":"Pages/GettingStarted/Workflow/","title":"Workflow","text":"<p>The workflow for Locus is similar to many other ECS-based engines such as Unity. There are still a lot of systems that needs to be implemented for a complete workflow.  I will continute to update this page whenever new systems are integrated.</p>"},{"location":"Pages/GettingStarted/Workflow/#entities","title":"Entities","text":"<p>Entities are the objects within a scene. They can represent anything from characters to lighting. Under the hood, entities are just containers for components and only holds an ID. By adding components, entities are able to carry out all kinds of functionalities.</p> <p>All entities contain a unique ID, a tag, and a transform. </p>"},{"location":"Pages/GettingStarted/Workflow/#components","title":"Components","text":"<p>Components are attached to entities and gives it functionality. Components contain data that defines the behavior of the entity. Component data can be manipulated through the editor or through scripting.</p>"},{"location":"Pages/GettingStarted/Workflow/#scenes","title":"Scenes","text":"<p>Scenes make up a collection of entities. This is where the level / environment is built. Scene files contain information about the scene and all entities contained in it. </p>"},{"location":"Pages/GettingStarted/Workflow/#scripting","title":"Scripting","text":"<p>Locus uses C# for its scripting system. Scripts are just like any other component and can be attached to any entity. Scripts will operate on the attached entity and a single script can be attached to as many entities.  Public properties are displayed in the editor and can be manipulated directly from the editor. </p> <p>A newly created script for a Player class will look something like this</p> <pre><code>using System;\nusing Locus;\n\nnamespace Sandbox\n{\n    public class Player : Entity\n    {\n        void OnCreate()\n        {\n\n        }\n\n        void OnUpdate(float deltaTime)\n        {\n\n        }\n    }\n}\n</code></pre> <p>All entity scripts derive from the Entity class and has built-in functions that gets called by the engine.  Scripts do not need to be in a namespace and is primarily used for organization purposes.</p>"},{"location":"Pages/GettingStarted/Workflow/#locus-editor","title":"Locus Editor","text":""}]}