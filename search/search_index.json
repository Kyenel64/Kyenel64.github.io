{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Pages/Home/","title":"Locus Game Engine","text":"<p>Locus is a free and open-source game engine aimed to be lightweight and general-purpose.  The engine is still in development. Progress can be tracked here.</p>"},{"location":"Pages/Home/#download-latest-or-build-from-source","title":"Download Latest or Build from Source","text":""},{"location":"Pages/Home/#about-locus","title":"About Locus","text":"<p>The engine is ECS-based with C# scripting, making the workflow familiar and easy to use for many game developers.  Locus comes with a fully integrated editor with a simple interface to help build games of any genre. </p>"},{"location":"Pages/Home/#locus-2d","title":"Locus 2D","text":"<p>Right now, development is focused on the engine's 2D systems. This includes 2D physics, sprite rendering, spritesheets, 2D skeletal animations, etc. Work on the 3D systems will begin once more of the 2D systems are implemented.</p>"},{"location":"Pages/Home/#contribute","title":"Contribute","text":"<p>Contribution to the project is always welcome. If you would like to help out or if you found a bug, please submit a pull-request/issue on the GitHub repository.</p>"},{"location":"Pages/Home/#about-me","title":"About Me","text":"<p>My name is Kye Nelson and I study Computer Science at the University of Washington. My passion is in computer graphics and game engine development. I currently reside in Japan and I am natively fluent in both English and Japanese.  You can find me on LinkedIn and GitHub.</p>"},{"location":"Pages/About/Introduction/","title":"Introduction","text":"<p>Locus is an open-source, general-purpose 2D/3D game engine developed by Kye Nelson (Kyenel64).  It aims to be a lightweight, feature-rich game engine capable of creating any type of game from scratch. The engine is ECS-based and the scripting language is in C#, making it easier to learn for many game developers.</p>"},{"location":"Pages/About/Introduction/#contribute","title":"Contribute","text":"<p>Since Locus is only developed by one person, progress is not fast. If you would like to contribute to the development of the engine, I am always open to receive feedback.  Feel free to open an issue or pull request on the GitHub repository.</p>"},{"location":"Pages/About/Introduction/#about-locus","title":"About Locus","text":"<p>Locus initially started as a simple project for me to learn computer graphics and software architecture.  As I spent more time on the engine, it became more mature and turned into something worth putting more time into. I followed TheCherno's game engine series to learn about game engine development and to write this engine. I strongly recommend following the series if you are also interested in game engine development.</p>"},{"location":"Pages/About/Introduction/#about-me","title":"About Me","text":"<p>My name is Kye Nelson and I am a Computer Science and Software Engineering student at the University of Washington. My focus is in computer graphics and game engine development as you could probably tell. I enjoy cleaning and organizing my code just as much as writing the actual code.  Outside of coding, you will likely catch me riding my road bike or listening to 80's R&amp;B records.  My LinkedIn</p>"},{"location":"Pages/Documentation/Introduction/","title":"Introduction","text":"<p>This section contains guides for the Locus editor and references to the C# scripting API for Locus. It also contains an example project to demonstrate core systems of the engine.  Each class reference will contain information about the class with a list of its properties and methods. </p> <p>Note: The documentation will be up to date with the \"develop\" branch, not the master branch of Locus. This means there might be documentations for classes that are not yet included in the most recent release. Each class reference will include the version number when the class was implemented to reduce confusion.</p>"},{"location":"Pages/Documentation/Workflow/","title":"Workflow","text":"<p>The workflow for Locus is similar to many other ECS-based engines such as Unity. </p>"},{"location":"Pages/Documentation/Workflow/#entities","title":"Entities","text":"<p>Entities are the objects within a scene. They can represent anything from characters to lighting. Under the hood, entities are just containers for components and only holds an ID. By adding components, entities are able to carry out all kinds of functionalities.</p> <p>All entities contain a unique ID (UUID), a tag, and a transform. </p>"},{"location":"Pages/Documentation/Workflow/#components","title":"Components","text":"<p>Components are what attaches to the entity and gives it functionality. Components contain data that defines the behavior of the entity. Component data can be manipulated through the editor or through scripting.</p>"},{"location":"Pages/Documentation/Workflow/#scenes","title":"Scenes","text":"<p>Scenes make up a collection of entities. This is where the level / environment is built. Scene files contain information about the scene and all entities contained in it. </p>"},{"location":"Pages/Documentation/Workflow/#scripting","title":"Scripting","text":"<p>Locus uses C# for its scripting system. Scripts are just like any other component and can be attached to any entity. Scripts will operate on the attached entity and a class can be attached to as many entities.  Public properties are displayed in the editor and can be manipulated directly from the editor. </p> <p>A newly created script for a Player class will look something like this</p> <pre><code>using System;\nusing Locus;\n\nnamespace Sandbox\n{\n    public class Player : Entity\n    {\n        void OnCreate()\n        {\n\n        }\n\n        void OnUpdate(float deltaTime)\n        {\n\n        }\n\n        // Optional collision callbacks\n        public override void OnCollisionBegin(Entity entity)\n        {\n\n        }\n\n        public override void OnCollisionEnd(Entity entity)\n        {\n\n        }\n    }\n}\n</code></pre> <p>All entity scripts derive from the Entity class and has built-in functions that gets called by the engine.  Scripts do not need to be in a namespace and is primarily used for organization purposes.</p>"},{"location":"Pages/Documentation/Workflow/#locus-editor","title":"Locus Editor","text":"<p>Each panel in the editor can be reorganized or detached.</p>"},{"location":"Pages/Documentation/Workflow/#toolbar","title":"Toolbar","text":"<p>The toolbar contains the main dropdown settings for the application and the runtime buttons for the current scene.</p>"},{"location":"Pages/Documentation/Workflow/#viewport","title":"Viewport","text":"<p>The viewport is where the scene is rendered. There is a toolbar on the top left corner for gizmo operations and editor view settings.  If an entity with a camera component is selected, it will display a preview in the bottom right corner.</p>"},{"location":"Pages/Documentation/Workflow/#scene-hierarchy","title":"Scene Hierarchy","text":"<p>The scene hierarchy contains the scene graph of the entities within the active scene. Here you can create, destroy, duplicate entities and search for entity names.</p>"},{"location":"Pages/Documentation/Workflow/#properties","title":"Properties","text":"<p>The properties panel contains all the components attached to the selected entity. All entities contain the tag component and transform component. You can add, remove, and copy components here.</p>"},{"location":"Pages/Documentation/Workflow/#content-browser","title":"Content Browser","text":"<p>The content browser displays the directory of the active project. The left hand side displays the entire project tree and the right hand side displays the items in the current folder. You can drag and drop certain items from the content browser to respective areas. </p>"},{"location":"Pages/Documentation/Workflow/#console","title":"Console","text":"<p>The console panel displays error messages and a trace for each error. Error messages can be copied, cleared, and filtered.</p>"},{"location":"Pages/Documentation/Workflow/#debug","title":"Debug","text":"<p>The debug panel is primarily used for backend engine work but can provide useful information about the scene and entities. </p>"},{"location":"Pages/Documentation/Classes/Component/","title":"Component","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha"},{"location":"Pages/Documentation/Classes/Component/#description","title":"Description","text":"<p>Base class for all components. Only contains the entity the component is attached to.</p>"},{"location":"Pages/Documentation/Classes/Component/#properties","title":"Properties","text":"Name Type Description <code>Entity</code> <code>Entity</code> The entity this component is attached to."},{"location":"Pages/Documentation/Classes/Entity/","title":"Entity","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha"},{"location":"Pages/Documentation/Classes/Entity/#description","title":"Description","text":"<p>Base class for all entities.</p>"},{"location":"Pages/Documentation/Classes/Entity/#properties","title":"Properties","text":"Name Type Description <code>ID</code> <code>ulong</code> UUID of the entity. <code>Tag</code> <code>string</code> Name of the entity. <code>Enabled</code> <code>bool</code> The enabled status of the entity. <code>Transform</code> <code>TransformComponent</code> The transform component attached to the entity. <code>Scene</code> <code>Scene</code> The scene that contains the entity."},{"location":"Pages/Documentation/Classes/Entity/#public-methods","title":"Public Methods","text":"Name Return type Description <code>GetComponent&lt;T&gt; ()</code> <code>T</code> Gets the component <code>T</code> attached to the entity. Returns null if not found. <code>HasComponent&lt;T&gt; ()</code> <code>bool</code> Checks if entity has component <code>T</code> <code>AddComponent&lt;T&gt; ()</code> <code>T</code> Adds component <code>T</code> to the entity."},{"location":"Pages/Documentation/Classes/Entity/#static-methods","title":"Static Methods","text":"Name Return type Description <code>CreateEntity (string tag = \u201cEmpty Entity\u201d)</code> <code>Entity</code> Creates an empty entity. Optionally sets the tag of the newly created entity. <code>Find (string tag)</code> <code>Entity</code> Searches for an entity with the given tag."},{"location":"Pages/Documentation/Classes/Vec3/","title":"Vec3","text":"Released in v0.1.1-alpha / Last updated in v0.1.1-alpha"},{"location":"Pages/Documentation/Classes/Vec3/#description","title":"Description","text":"<p>3D floating point vector class used for 3D and 2D position and vector operations. Contains static methods for common vector math operations. </p>"},{"location":"Pages/Documentation/Classes/Vec3/#properties","title":"Properties","text":"Name Type Description <code>x</code> <code>float</code> The x coordinate value. <code>y</code> <code>float</code> The y coordinate value. <code>z</code> <code>float</code> The z coordinate value."},{"location":"Pages/Documentation/Classes/Vec3/#static-properties","title":"Static Properties","text":"Name Type Description <code>Zero</code> <code>Vec3</code> A zero vector."},{"location":"Pages/Documentation/Classes/Vec3/#constructors","title":"Constructors","text":"Name Description <code>Vec3 (float value)</code> Sets all coordinates to the given value. <code>Vec3 (float X, float Y, float Z)</code> Sets each respective coordinate."},{"location":"Pages/Documentation/Classes/Vec3/#public-methods","title":"Public Methods","text":"Name Return type Description <code>Length ()</code> <code>float</code> Length of the vector."},{"location":"Pages/Documentation/Classes/Vec3/#static-methods","title":"Static Methods","text":"Name Return type Description <code>Cross (Vec3 v1, Vec3 v2)</code> <code>Vec3</code> Cross product between two vectors. <code>Distance (Vec3 v1, Vec3 v2)</code> <code>float</code> Distance between two 3D vectors. <code>Lerp (Vec3 a, Vec3 b, float t)</code> <code>Vec3</code> Linearly interpolates between two 3D vectors at a given point t."},{"location":"Pages/GettingStarted/HowToBuild/","title":"How to Build","text":"<p>This page is a step-by-step guide on how to build and run Locus on your system. Compiling the source code from the develop branch will get you the latest updates on Locus.  If you would like to download the most recent release of Locus, head to the latest release page and download the zip file.  Note: The application currently has no .exe signature so it is recommended to build from source. </p>"},{"location":"Pages/GettingStarted/HowToBuild/#requirements","title":"Requirements","text":"<ul> <li>Windows OS</li> <li>OpenGL 4.5 supported hardware</li> <li>Visual Studio 2022</li> <li>Python 3</li> <li>.NET SDK</li> </ul>"},{"location":"Pages/GettingStarted/HowToBuild/#1-downloading-source-code","title":"1. Downloading source code","text":"<ul> <li>Run <code>git clone --recursive https://github.com/kyenel64/Locus-Engine</code> in the command prompt. Remember to include <code>--recursive</code> as Locus uses submodules.</li> </ul>"},{"location":"Pages/GettingStarted/HowToBuild/#2-run-scriptssetupbat","title":"2. Run Scripts/Setup.bat","text":"<ul> <li>Run Scripts/Setup.bat to install premake and generate a Visual Studio solution.</li> <li>IMPORTANT: Make sure 'Shader Toolchain Debug Symbols - 64-bit' is selected if the Vulkan pop-up opens.</li> </ul>"},{"location":"Pages/GettingStarted/HowToBuild/#21-temp-build-sandboxproject","title":"2.1 (Temp) Build SandboxProject","text":"<ul> <li>NOTE: Locus currently does not have a proper project directory system setup. There is a placeholder project directory called \"SandboxProject\" in the \"Locus-Editor\" folder.  You will need to manually generate and build the sandbox project solution for now.</li> <li>Run Locus-Editor/SandboxProject/Setup.bat.</li> <li>Open and build Locus-Editor/SandboxProject/Sandbox.sln.</li> </ul>"},{"location":"Pages/GettingStarted/HowToBuild/#3-build-using-visual-studio","title":"3. Build using Visual Studio","text":"<ul> <li>Open Locus.sln</li> <li>Build solution. (Locus-Editor should be selected as the startup project).</li> </ul>"},{"location":"Pages/GettingStarted/HowToBuild/#4-running-the-engine-editor","title":"4. Running the engine editor","text":"<ul> <li>The .exe file will be generated in bin/(Config)-windows-x86_64/Locus-Editor</li> </ul>"},{"location":"Pages/GettingStarted/Introduction/","title":"Introduction","text":"<p>This section will guide you through how to compile Locus and everything you need to know to get Locus running on your computer. </p>"},{"location":"Pages/GettingStarted/Introduction/#compatibility","title":"Compatibility","text":"<p>Locus currently only supports Windows. Integration with other operating systems will be considered if there is demand for it. </p> <p>Locus currently uses OpenGL 4.5+ for its graphics API but Vulkan and DirectX support will be integrated in the near future.</p>"},{"location":"Pages/GettingStarted/Introduction/#disclaimer","title":"Disclaimer","text":"<p>Since Locus is still a work in progress and new features are implemented frequently, save files may become corrupted.</p>"}]}