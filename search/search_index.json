{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"About/Introduction/","title":"Introduction","text":"<p>Locus is an open-source, general-purpose 2D/3D game engine developed by Kye Nelson (Kyenel64).  It aims to be a lightweight, feature-rich game engine capable of creating any type of game from scratch. The engine is ECS-based and the scripting language is in C#, making it easier to learn for many game developers.</p>"},{"location":"About/Introduction/#contribute","title":"Contribute","text":"<p>Since Locus is only developed by one person, progress is not fast. If you would like to contribute to the development of the engine, I am always open to receive feedback.  Feel free to open an issue or pull request on the GitHub repository.</p>"},{"location":"About/Introduction/#about-locus","title":"About Locus","text":"<p>Locus initially started as a simple project for me to learn computer graphics and software architecture.  As I spent more time on the engine, it became more mature and turned into something worth putting more time into. I followed TheCherno's game engine series to learn about game engine development and to write this engine. I strongly recommend following the series if you are also interested in game engine development.</p>"},{"location":"About/Introduction/#about-me","title":"About Me","text":"<p>My name is Kye Nelson and I am a Computer Science and Software Engineering student at the University of Washington. My focus is in computer graphics and game engine development as you could probably tell. I enjoy cleaning and organizing my code just as much as writing the actual code.  Outside of coding, you will likely catch me riding my road bike or listening to 80's R&amp;B records.  My LinkedIn</p>"},{"location":"Getting_Started/HowToBuild/","title":"How to Build","text":"<p>This page is a step-by-step guide on how to build and run Locus on your system. Compiling the source code from the develop branch will get you the latest updates on Locus.  If you would like to download the most recent release of Locus, head to the latest release page and download the zip file.</p>"},{"location":"Getting_Started/HowToBuild/#requirements","title":"Requirements","text":"<ul> <li>Windows OS</li> <li>OpenGL 4.6 supported hardware</li> <li>Visual Studio 2022</li> <li>Python 3</li> </ul>"},{"location":"Getting_Started/HowToBuild/#downloading-the-source-code","title":"Downloading the source code","text":"<p>Locus utilizes submodules so downloading the zip of the source code will not work.  Instead, use the following command within the directory you want to download Locus.  <code>git clone --recurse-submodules https://github.com/kyenel64/Locus-Engine</code></p>"},{"location":"Getting_Started/HowToBuild/#run-setupbat","title":"Run Setup.bat","text":"<p>Run <code>Scripts/Setup.bat</code> and follow the prompts to install premake and the Vulkan shader toolchain.  Make sure 'Shader Toolchain Debug Symbols - 64-bit' is selected when the Vulkan install pop-up opens. You might have to run the setup script twice if prompted.</p>"},{"location":"Getting_Started/HowToBuild/#build-and-run","title":"Build and run","text":"<p>Once the setup is finished, open <code>Locus.sln</code> which should be generated in the root directory.  Choose the configuration and build the solution. <code>Locus-Editor.exe</code> will be generated in <code>bin/{configuration}-windows-x86_64/Locus-Editor</code>.</p>"},{"location":"Getting_Started/Introduction/","title":"Introduction","text":"<p>This section will guide you through how to compile Locus, and go through the engine's core workflow including a few example projects. </p>"},{"location":"Getting_Started/Introduction/#compatibility","title":"Compatibility","text":"<p>Locus currently only supports Windows since the vast majority of users / developers use Windows. Other platform support will be considered in the future but as of right now, time and resources is limited and it does not make sense to add support for other platforms. The Steam hardware survey shows ~97% of users are on Windows. </p> <p>Locus currently uses OpenGL 4.5+ for its graphics API but Vulkan and DirectX support will definitely be implemented in the near future.</p>"},{"location":"Getting_Started/Introduction/#disclaimer","title":"Disclaimer","text":"<p>Since Locus is still a work in progress and new features are implemented frequently, save files may also become depricated frequently. I will try and push scripts to fix save files when necessary. </p>"},{"location":"Getting_Started/Workflow/","title":"Workflow","text":"<p>The workflow for Locus is similar to many other ECS-based engines such as Unity. There are still a lot of systems that needs to be implemented for a complete workflow.  I will continute to update this page whenever new systems are integrated.</p>"},{"location":"Getting_Started/Workflow/#entities","title":"Entities","text":"<p>Entities are the objects within a scene. They can represent anything from characters to lighting. Under the hood, entities are just containers for components and only holds an ID. By adding components, entities are able to carry out all kinds of functionalities.</p> <p>All entities contain a unique ID, a tag, and a transform. </p>"},{"location":"Getting_Started/Workflow/#components","title":"Components","text":"<p>Components are attached to entities and gives it functionality. Components contain data that defines the behavior of the entity. Component data can be manipulated through the editor or through scripting.</p>"},{"location":"Getting_Started/Workflow/#scenes","title":"Scenes","text":"<p>Scenes make up a collection of entities. This is where the level / environment is built. Scene files contain information about the scene and all entities contained in it. </p>"},{"location":"Getting_Started/Workflow/#scripting","title":"Scripting","text":"<p>Locus uses C# for its scripting system. Scripts are just like any other component and can be attached to any entity. Scripts will operate on the attached entity and a single script can be attached to as many entities.  Public properties are displayed in the editor and can be manipulated directly from the editor. </p> <p>A newly created script for a Player class will look something like this</p> <pre><code>using System;\nusing Locus;\n\nnamespace Sandbox\n{\n    public class Player : Entity\n    {\n        void OnCreate()\n        {\n\n        }\n\n        void OnUpdate(float deltaTime)\n        {\n\n        }\n    }\n}\n</code></pre> <p>All entity scripts derive from the Entity class and has built-in functions that gets called by the engine.  Scripts do not need to be in a namespace and is primarily used for organization purposes.</p>"},{"location":"Getting_Started/Workflow/#locus-editor","title":"Locus Editor","text":""}]}